name: Build Docker images
on:
  workflow_dispatch:
    inputs:
      version:
        description: PyOxidizer version ("main", or a published crate version)
        required: true
        default: main

jobs:
  rust_image_tag_group_matrix:
    name: Generate Rust Docker image tag matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      -
        id: set-matrix
        run: |
          echo -n '::set-output name=matrix::[' \
          && curl --silent https://raw.githubusercontent.com/docker-library/official-images/master/library/rust \
            | grep -E Tags: \
            | cut -d ' ' -f 2- \
            | sed 's/\(.*\)/"\1",/g' \
            | sed '$ s/.$//' \
            | tr '\n' ' ' \
          && echo ']'
  build_and_push:
    name: Build and push
    needs: [rust_image_tag_group_matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust_image_tags: ${{fromJSON(needs.rust_image_tag_group_matrix.outputs.matrix)}}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        run: |
          REPO=${{ secrets.DOCKERHUB_USERNAME }}/pyoxidizer
          VERSION=${{ github.event.inputs.version }}
          RUST_IMAGE_TAG_MOST_SPECIFIC="$(echo ${{ matrix.rust_image_tags }} \
            | sed 's/, /\n/g' \
            | awk ' { if ( length > x ) { x = length; y = $0 } }END{ print y }')"

          if [[ "$RUST_IMAGE_TAG_MOST_SPECIFIC" == *alpine* ]]; then
            PLATFORMS=linux/amd64
          else
            PLATFORMS=linux/amd64,linux/arm64
          fi

          echo ${{ matrix.rust_image_tags }} \
            | sed 's/, /\n/g' \
            | sed "s|^|--tag $REPO:$VERSION-rust-|" \
            | xargs docker buildx build \
              --build-arg=RUST_IMAGE=rust:$RUST_IMAGE_TAG_MOST_SPECIFIC \
              --build-arg=VERSION=$VERSION \
              --platform $PLATFORMS \
              --push \
              .
